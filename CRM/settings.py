"""
Django settings for CRM project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = os.environ.get("SECRET_KEY")
SECRET_KEY = "django-insecure-e6=0h9zn!5tf#063k3&$vf5%(ai(+5orosgoi2(!_ot9i8(_a)"

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = bool(os.environ.get("DEBUG", 0))
DEBUG = 1

# ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "localhost 127.0.0.1 bioritm.pythonanywhere.com").split(" ")
ALLOWED_HOSTS = ["localhost",  "127.0.0.1",  "bioritm.pythonanywhere.com"]
CORS_ALLOWED_ORIGINS = [
    'http://localhost:8080',
    # 'http://bioritm.pythonanywhere.com',
    'http://185.217.131.70',
    'https://rm.bioritm.org'
]
CORS_ORIGIN_WHITELIST = (
    'http://localhost:8080',
    'https://localhost:8080',
)

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-requested-with",
]

CORS_ORIGIN_ALLOW_ALL = True

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_PAGINATION_CLASS': 'utils.pagination.BasicPagination',
    'PAGE_SIZE': 30
}
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_filters',
    # 'dbbackup',

    'account.apps.AccountConfig',
    'service.apps.ServiceConfig',
    'client.apps.ClientConfig',
    'order.apps.OrderConfig',
    'analytics.apps.AnalyticsConfig'
]

DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {'location': BASE_DIR / 'backup'}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
]

ROOT_URLCONF = 'CRM.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'CRM.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
# if DEBUG == 0:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
# else:
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.environ.get("DB_NAME", "db_django"),
#         'USER': os.environ.get("DB_USER", "adminuser"),
#         'PASSWORD': os.environ.get("DB_PASS", '123456789'),
#         'HOST': os.environ.get("DB_HOST", "db"),
#         'PORT': os.environ.get("DB_PORT", "3306"),
#         'OPTIONS': {
#             'init_command': 'ALTER DATABASE db_django CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci',
#         },
#     }
# }



# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": "redis://127.0.0.1:6379/1",
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#             "PASSWORD": ""
#         },
#         "KEY_PREFIX": "example"
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
# AUTH_USER_MODEL = 'USER'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Asia/Tashkent'

USE_I18N = True

# USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/api/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles/')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'staticfiles/')
]

MEDIA_URL = '/api/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles/')


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
#
# CRONJOBS = [
#     ('1 0 * * *', 'order.cron.my_cron_job', '>> ' + os.path.join(BASE_DIR, 'logs/cron.log' + ' 2>&1 ')),
# ]

# LOG_DIR = os.path.join(BASE_DIR, 'logs/')
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'verbose': {
#             'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
#             'style': '{',
#         },
#         'simple': {
#             'format': '{levelname} {message}',
#             'style': '{',
#         },
#     },
#     'filters': {
#         'require_debug_false': {
#             '()': 'django.utils.log.RequireDebugFalse',
#         },
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         },
#     },
#     'handlers': {
#         'file': {
#             'level': 'DEBUG' if DEBUG else 'INFO',
#             'class': 'logging.FileHandler',
#             'filename': f"{LOG_DIR}debug.log",
#             'formatter': 'verbose' if DEBUG else 'simple'
#         },
#         'mail_admins': {
#             'level': 'ERROR',
#             'filters': ['require_debug_false'],
#             'class': 'django.utils.log.AdminEmailHandler',
#             'formatter': 'verbose'
#         },
#         # 'db_queries': {
#         #     'level': 'DEBUG',
#         #     'filters': ['require_debug_true'],
#         #     'class': 'logging.FileHandler',
#         #     'filename': f"{LOG_DIR}db_queries.log",
#         # }
#     },
#     'loggers': {
#         # 'django': {
#         #     'handlers': ['db_queries'],
#         #     'level': 'DEBUG',
#         #     'propagate': True,
#         # },
#         'warnings': {
#             'handlers': ['file'],
#             'level': 'DEBUG',
#             'propagate': True,
#         }
#     },
# }



